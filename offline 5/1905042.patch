diff --git a/Makefile b/Makefile
index 39a99d7..30e952b 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..6782ad4 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -89,6 +89,7 @@ int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
 void            proc_freepagetable(pagetable_t, uint64);
+void            thr_freepagetable(pagetable_t, uint64 );       //-- free page table not physical memory
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +107,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64 fcn, uint64 arg, uint64 stack);   //--
+int             thread_join(int thread_id);
+void            thread_exit(void);
+void            atomic_release_sleep(uint64);
+void            wakeMeUp(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,7 +171,11 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+
+int             uvmnewmirror(pagetable_t old, pagetable_t new,uint64 oldsz, uint64 nsz);   //--
 void            uvmfree(pagetable_t, uint64);
+void            uvmThrfree(pagetable_t, uint64);             //-- free thread not freeing memory (,0)
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
@@ -173,6 +183,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             copyoutSingleByte(pagetable_t pagetable, uint64 dstva);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..f215fe3 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -9,11 +9,14 @@
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
+struct spinlock memLocks[NPROC];
 
 struct proc *initproc;
 
 int nextpid = 1;
+int next_memid = 1;
 struct spinlock pid_lock;
+struct spinlock mem_id_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -51,10 +54,14 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&mem_id_lock,"memidgen");
+  int i=0;
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&memLocks[i],"memLock"); //--
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
+      i++;
   }
 }
 
@@ -101,6 +108,18 @@ allocpid()
 
   return pid;
 }
+int
+alloc_memid()
+{
+  int memid;
+
+  acquire(&mem_id_lock);
+  memid = next_memid;
+  next_memid=next_memid+1;
+  release(&mem_id_lock);
+
+  return memid;
+}
 
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
@@ -110,21 +129,27 @@ static struct proc*
 allocproc(void)
 {
   struct proc *p;
-
+  int i=0;
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+       p->memLock= &memLocks[i]  ;   //--
       goto found;
     } else {
       release(&p->lock);
     }
+    i++;
   }
   return 0;
 
 found:
+
+  p->mem_id = alloc_memid();
+
   p->pid = allocpid();
-  p->state = USED;
 
+  p->state = USED;
+  p->isThread = 0;               //--
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -159,7 +184,13 @@ freeproc(struct proc *p)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  {
+      if(p->isThread==1)
+      thr_freepagetable(p->pagetable,p->sz);
+      else
+      proc_freepagetable(p->pagetable, p->sz);
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -214,6 +245,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
   uvmfree(pagetable, sz);
 }
+//-- Free a Thread's page table, and don't free the physical memory
+void
+thr_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmThrfree(pagetable, sz);
+}
 
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
@@ -259,18 +298,41 @@ userinit(void)
 int
 growproc(int n)
 {
+
   uint64 sz;
   struct proc *p = myproc();
-
+  acquire(p->memLock);
   sz = p->sz;
+  uint64 oldsz = sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(p->memLock);
       return -1;
     }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+  struct proc * prc;
+  for(prc = proc; prc < &proc[NPROC]; prc++) {
+    if(prc!=p && p->mem_id == prc->mem_id)
+    {
+      if(n>0)
+      {
+        //printf("-1\n");
+        uvmnewmirror(p->pagetable,prc->pagetable,oldsz,sz);
+
+      }
+      else if(n<0)
+      {
+        // printf("decreasing\n");
+        uvmunmap(prc->pagetable,PGROUNDUP(sz),(PGROUNDUP(oldsz) - PGROUNDUP(sz)) / PGSIZE,0);
+
+      }
+    }
+  }
+  release(p->memLock);
   return 0;
 }
 
@@ -289,11 +351,14 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
+  acquire(p->memLock);
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
     release(&np->lock);
+    release(p->memLock);
     return -1;
   }
+  release(p->memLock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -681,3 +746,201 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+int
+thread_create(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  acquire(p->memLock);
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    release(p->memLock);
+    return -1;
+  }
+  release(p->memLock);
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  //-- first argument
+  //np->trapframe->a0 = 0;
+  np->memLock=p->memLock;
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  //--
+  np->trapframe->epc = (uint64) fcn;
+  np->trapframe->a0 = (uint64)arg;
+  np->trapframe->sp = (uint64) stack+PGSIZE;
+  np->trapframe->sp -= np->trapframe->sp % 16;
+  np->isThread = 1;
+  np->mem_id = p->mem_id;
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+
+  return pid;
+}
+int thread_join(int thread_id)
+{
+
+
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp == p) continue;
+
+      if(pp->pid == thread_id || pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+
+
+return 0;
+}
+void thread_exit(void)
+{
+  //--
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+
+  acquire(&p->lock);
+
+  p->xstate = 0;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+void
+atomic_release_sleep(uint64 mtxAddr)
+{
+  struct proc *p = myproc();
+
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  copyoutSingleByte(p->pagetable,mtxAddr);
+
+
+  // Go to sleep.
+
+  p->state = SLEEPING;
+
+  sched();
+
+  // Tidy up.
+
+
+  // Reacquire original lock.
+  release(&p->lock);
+
+}
+void
+wakeMeUp(int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == pid) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..e1cdcf1 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct spinlock* memLock;     //-- for Threading offline
+  int isThread;
+  int mem_id;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ed57081 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);  //--
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_atomic_release_sleep(void);
+extern uint64 sys_wakeMeUp(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,  //--
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_atomic_release_sleep] sys_atomic_release_sleep,
+[SYS_wakeMeUp] sys_wakeMeUp,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c4702ca 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22    //-- threading offline
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_atomic_release_sleep 25
+#define SYS_wakeMeUp 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3e0aa35 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//--
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn_addr,arg_addr,stack_addr;
+  argaddr(0, &fcn_addr);
+  argaddr(1,&arg_addr);
+  argaddr(2,&stack_addr);
+
+
+
+  int x = thread_create(fcn_addr,arg_addr, stack_addr);
+  // printf("returning from syscall %d\n", x);
+  return x;
+
+}
+uint64
+sys_thread_join(void)
+{
+  int thr_id;
+  argint(0,&thr_id);
+  return thread_join(thr_id);
+}
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
+uint64
+sys_atomic_release_sleep(void)
+{
+  uint64 addr;
+  argaddr(0,&addr);
+  atomic_release_sleep(addr);
+  return 0;
+}
+uint64
+sys_wakeMeUp(void)
+{
+  int pid;
+  argint(0,&pid);
+  wakeMeUp(pid);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..b2ded8a 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,16 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+///--
+//-- Free user memory pages not physical,
+// then free page-table pages.
+void
+uvmThrfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -437,3 +447,87 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// Given a parent process's page table, copy
+// its memory into a child's page table.
+// Copies both the page table and the
+// physical memory.
+// returns 0 on success, -1 on failure.
+// frees any allocated pages on failure.
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      //  kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
+int
+uvmnewmirror(pagetable_t old, pagetable_t new,uint64 oldsz, uint64 nsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  oldsz = PGROUNDUP(oldsz);
+  nsz = PGROUNDUP(nsz);
+
+  for(i = oldsz; i < nsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      //  kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
+//--
+
+int
+copyoutSingleByte(pagetable_t pagetable, uint64 dstva)
+{
+  uint64  va0, pa0;
+
+    va0 = PGROUNDDOWN(dstva);
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+            __sync_synchronize();
+            __sync_lock_release((uint8*)(pa0 + (dstva - va0)));
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..e87e9ad
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,107 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "pspinlock.h"
+
+
+// a mutex object lock
+// a semaphore object empty
+// a semaphore object full
+struct my_queue Q;
+struct thread_mutex lock;
+struct semaphore empty;
+struct semaphore full;
+
+void init_semaphore()
+{
+	// initialize mutex lock
+    thread_mutex_init(&lock);
+    lock.name = "LOCK";
+    full.name="FULL";
+    empty.name="EMPtY";
+	// initialize semaphore empty with 5
+    thread_sem_init(&empty,5);
+	// initialize semaphore full with 0
+    thread_sem_init(&full,0);
+
+}
+void ProducerFunc(void * arg)
+{
+	thread_mutex_lock(&lock);
+	printf("%s\n",(char*)arg);
+	thread_mutex_unlock(&lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+            thread_sem_wait(&empty);
+
+		sleep(2);
+		// wait for mutex lock
+        thread_mutex_lock(&lock);
+
+		sleep(1);
+		 my_queue_push(&Q, i);
+		printf("producer produced item %d\n",i);
+
+		// unlock mutex lock
+          thread_mutex_unlock(&lock);
+		// post semaphore full
+        thread_sem_post(&full);
+
+	}
+    thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	thread_mutex_lock(&lock);
+	printf("%s\n",(char*)arg);
+	thread_mutex_unlock(&lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore full
+         thread_sem_wait(&full);
+		// wait for mutex lock
+		sleep(5);
+        thread_mutex_lock(&lock);
+		sleep(1);
+		int item = get_front(&Q);
+		//Q.pop();
+        my_queue_pop(&Q);
+		printf("consumer consumed item %d\n",item);
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&lock);
+		// post semaphore empty
+		 thread_sem_post(&empty);
+	}
+    thread_exit();
+
+}
+
+int main(void)
+{
+
+	init_semaphore();
+	my_queue_init(&Q);
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+	int thread1, thread2, r1, r2;
+
+	s1 = malloc(4096);
+	s2 = malloc(4096);
+
+	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+	thread2 = thread_create(ConsumerFunc, (void*)message2, s2);
+
+	r1 = thread_join(thread1);
+	r2 = thread_join(thread2);
+	printf("%d,%d\n",r1,r2);
+	exit(0);
+}
diff --git a/user/pspinlock.h b/user/pspinlock.h
new file mode 100644
index 0000000..96ae663
--- /dev/null
+++ b/user/pspinlock.h
@@ -0,0 +1,282 @@
+// Mutual exclusion spin locks.
+
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+
+
+
+
+// Mutual exclusion lock.
+struct thread_spinlock {
+  uint locked;       // Is the lock held?
+
+
+  char *name;        // Name of lock.
+  int pid ;   // The process holding the lock.
+};
+struct thread_mutex {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.
+  int pid ;   // The cpu holding the lock.
+
+};
+
+struct my_queue{
+	int arr[16];
+	int front_idx;
+	int rear_idx;
+	int size;
+
+};
+
+struct conditionalVar {
+  struct my_queue q;
+  struct thread_mutex arrMtx;
+  struct thread_mutex mtx;
+};
+
+struct semaphore {
+  struct conditionalVar cv;
+  struct thread_mutex mtx;
+  int cnt;
+  char* name;
+};
+struct thread_mutex cmts;
+
+int
+holding(struct thread_spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
+
+//----pspinlock-----
+
+void
+thread_spin_init(struct thread_spinlock *lk) //-- name deleted
+{
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+ // push_off(); // disable interrupts to avoid deadlock.
+  if(holding(lk))
+    printf("acquire");
+ // printf("locked %p\n",lk);
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  if(!holding(lk))
+    printf("release");
+
+ // printf("unlocked %p",lk);
+  lk->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+ // pop_off();
+}
+
+
+//----pmutex----
+
+void
+thread_mutex_init(struct thread_mutex *lk) //-- name deleted
+{
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *m)
+{
+  //  if(holding(m))
+  //   printf("acquire");
+
+
+  while(m->locked)
+    sleep(1);
+  // thread_mutex_lock(&cmts);
+  // printf("%s locked.\n",m->name);
+  //  thread_mutex_unlock(&cmts);
+  __sync_lock_test_and_set(&m->locked, 1);
+  __sync_synchronize();
+  m->pid = getpid();
+}
+void
+thread_mutex_unlock(struct thread_mutex *m)
+{
+  // if(!holding(m))
+  //   printf("release");
+
+ // printf("unlocked %p",lk);
+  m->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&m->locked);
+
+ // pop_off();
+}
+
+//----- Q -----
+
+void my_queue_init(struct my_queue *queue)
+{
+    queue->front_idx = 0;
+    queue->rear_idx = 0;
+    queue->size = 0;
+
+}
+void my_queue_push(struct my_queue *q, int x)
+{
+    q->arr[q->rear_idx] = x;
+    q->rear_idx = (q->rear_idx + 1) % 16;
+    q->size++;
+}
+int get_front(struct my_queue *q)
+{
+    if (q->size == 0)
+        return -1;
+    return q->arr[q->front_idx];
+}
+
+void my_queue_pop(struct my_queue *q)
+{
+    q->front_idx = (q->front_idx + 1) % 16;
+    q->size--;
+}
+struct my_queue q;
+
+//----- conditional variables -----
+void c_var_init(struct conditionalVar * cv)
+{
+  my_queue_init(&(cv->q));
+  thread_mutex_init(&(cv->arrMtx));
+  thread_mutex_init(&(cv->mtx));
+
+}
+void thread_cond_wait(struct conditionalVar * cv , struct thread_mutex *mtx)
+{
+    thread_mutex_lock(&cv->arrMtx);
+     my_queue_push(&cv->q, getpid());
+     thread_mutex_unlock (&cv->arrMtx);
+
+    atomic_release_sleep(&mtx->locked);
+    thread_mutex_unlock (mtx); /* Woke up -- our turn, get resource lock */
+    return;
+}
+void thread_cond_wakeUp(struct conditionalVar * cv)
+{
+     thread_mutex_lock(&cv->arrMtx);
+     ///printf("wa------ %d\n",q.size);
+  if(cv->q.size>0)
+    {
+      int pid = get_front(&(cv->q));
+    ///  printf("wakeUp %d\n",pid);
+      wakeMeUp(pid);
+      my_queue_pop(&(cv->q));
+
+    }
+    thread_mutex_unlock (&cv->arrMtx);
+}
+
+
+//---- Semaphore -------
+
+void
+thread_sem_init(struct semaphore* sm,int cnt) //-- name deleted
+{
+
+  c_var_init(&sm->cv);
+  thread_mutex_init(&sm->mtx);
+  sm->cnt=cnt;
+
+}
+void
+thread_sem_wait(struct semaphore* sm)
+{
+  thread_mutex_lock(&sm->mtx);
+  //printf("---cnt-%d",sm->cnt);
+   thread_mutex_lock(&cmts);
+  //printf("%s wait.\n",sm->name);
+   thread_mutex_unlock(&cmts);
+  while(sm->cnt==0)
+  {
+
+    thread_cond_wait( &sm->cv,&sm->mtx);
+
+  }
+  (sm->cnt)--;
+  thread_mutex_unlock(&sm->mtx);
+}
+void thread_sem_post(struct semaphore* sm)
+{
+  ;
+  thread_mutex_lock(&sm->mtx);
+   thread_mutex_lock(&cmts);
+  //printf("%s post.\n",sm->name);
+   thread_mutex_unlock(&cmts);
+  sm->cnt++;
+  thread_mutex_unlock(&sm->mtx);
+  thread_cond_wakeUp(& sm->cv);
+
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..e51a048
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,76 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "pspinlock.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+struct thread_mutex mlock;
+struct thread_mutex consoleLock;
+struct thread_spinlock lock;
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    thread_mutex_lock(&consoleLock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&consoleLock);
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+         // thread_spin_lock(&lock);
+          thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+          thread_mutex_unlock(&mlock);
+
+    }
+    thread_mutex_lock(&consoleLock);
+    printf( "Done s:%s\n", b->name);
+    thread_mutex_unlock(&consoleLock);
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+thread_spin_init(&lock);
+thread_mutex_init(&mlock);
+thread_mutex_init(&consoleLock);
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  thread_mutex_lock(&consoleLock);
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+  thread_mutex_unlock(&consoleLock);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..cf1e9e3 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,12 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+int thread_create(void* fcn, void *arg, void* stack); //-- thread offline
+int thread_join(int thread_id);
+void thread_exit(void);
+void atomic_release_sleep(uint8*);
+void wakeMeUp(int);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..35e8e43 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create"); #--
+entry("thread_join");
+entry("thread_exit");
+entry("atomic_release_sleep");
+entry("wakeMeUp");
